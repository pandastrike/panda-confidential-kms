"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _sundog = _interopRequireDefault(require("sundog"));

var _pandaParchment = require("panda-parchment");

var _pandaGenerics = require("panda-generics");

var _kmsKey = require("./kms-key");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var KMSExtension;

// Extend Confidential with KMS via sundog.
KMSExtension = function (confidential, SDK) {
  var KMS, decode, encode, isData, kmsDecrypt, kmsEncrypt, nacl, randomBytes, randomKey;
  ({
    // Access to the AWS API through the Sundog helper layer.
    AWS: {
      KMS
    }
  } = (0, _sundog.default)(SDK));
  ({
    randomKey,
    encrypt: kmsEncrypt,
    decrypt: kmsDecrypt
  } = KMS()); // Override TweetNaCl's local randomBytes method with KMS

  confidential.randomBytes = async function (length) {
    return await randomKey(length, "buffer");
  }; // Extend the key-type interface


  confidential.key.KMS = _kmsKey.kmsKeyID;
  confidential.key.isKMSKeyID = _kmsKey.isKMSKeyID;
  ({
    encode,
    decode,
    isData,
    randomBytes,
    nacl
  } = confidential); // Extension to Symmetric Encryption that encrypts the key with KMS.

  _pandaGenerics.Method.define(confidential.encrypt, _kmsKey.isKMSKeyID, isData, async function ({
    id
  }, plaintext) {
    var ciphertext, key, length, lockedKey, nonce, r;
    length = nacl.secretbox.nonceLength + nacl.secretbox.keyLength;
    r = await randomBytes(length);
    key = r.slice(0, nacl.secretbox.keyLength);
    nonce = r.slice(nacl.secretbox.keyLength);
    ciphertext = nacl.secretbox(plaintext, nonce, key);
    lockedKey = await kmsEncrypt(id, key, "buffer");
    return encode({
      lockedKey: lockedKey,
      // Already base64
      ciphertext: encode("base64", ciphertext),
      nonce: encode("base64", nonce)
    });
  });

  _pandaGenerics.Method.define(confidential.encrypt, _kmsKey.isKMSKeyID, _pandaParchment.isString, _pandaParchment.isString, function (key, plaintext, encoding) {
    return confidential.encrypt(key, decode(encoding, plaintext));
  });

  _pandaGenerics.Method.define(confidential.encrypt, _kmsKey.isKMSKeyID, _pandaParchment.isString, function (key, plaintext) {
    return confidential.encrypt(key, decode("utf8", plaintext));
  }); // Extension to Symmetric Decryption that encrypts the key with KMS.


  _pandaGenerics.Method.define(confidential.decrypt, _kmsKey.isKMSKeyID, isData, _pandaParchment.isString, async function ({
    id
  }, blob, encoding) {
    var ciphertext, key, lockedKey, nonce;
    ({
      ciphertext,
      nonce,
      lockedKey
    } = JSON.parse(encode("utf8", blob)));
    ciphertext = decode("base64", ciphertext);
    nonce = decode("base64", nonce);
    key = await kmsDecrypt(lockedKey, "buffer");
    return encode(encoding, nacl.secretbox.open(ciphertext, nonce, key));
  });

  _pandaGenerics.Method.define(confidential.decrypt, _kmsKey.isKMSKeyID, isData, function (key, blob) {
    return confidential.decrypt(key, blob, "utf8");
  });

  _pandaGenerics.Method.define(confidential.decrypt, _kmsKey.isKMSKeyID, _pandaParchment.isString, _pandaParchment.isString, function (key, blob, encoding) {
    return confidential.decrypt(key, decode("base64", blob), encoding);
  });

  _pandaGenerics.Method.define(confidential.decrypt, _kmsKey.isKMSKeyID, _pandaParchment.isString, function (key, blob) {
    return confidential.decrypt(key, decode("base64", blob), "utf8");
  });

  return confidential;
};

var _default = KMSExtension;
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,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LFFBQUEsRUFBMUIsSUFBMEIsQ0FBMUIsRUFBQSxRQUFBLEM7QUFGSixHQUFBOztBQUdBLHdCQUFBLE1BQUEsQ0FBYyxZQUFZLENBQTFCLE9BQUEsRUFBQSxrQkFBQSxFQUFBLHdCQUFBLEVBQ0UsVUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBO1dBQ0UsWUFBWSxDQUFaLE9BQUEsQ0FBQSxHQUFBLEVBQTBCLE1BQUEsQ0FBQSxRQUFBLEVBQTFCLElBQTBCLENBQTFCLEVBQUEsTUFBQSxDO0FBRkosR0FBQTs7U0FJQSxZO0FBdERhLENBQWY7O2VBd0RlLFkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3VuZG9nIGZyb20gXCJzdW5kb2dcIlxuaW1wb3J0IHtpc1N0cmluZ30gZnJvbSBcInBhbmRhLXBhcmNobWVudFwiXG5pbXBvcnQge01ldGhvZH0gZnJvbSBcInBhbmRhLWdlbmVyaWNzXCJcbmltcG9ydCB7aXNLTVNLZXlJRCwga21zS2V5SUR9IGZyb20gXCIuL2ttcy1rZXlcIlxuXG4jIEV4dGVuZCBDb25maWRlbnRpYWwgd2l0aCBLTVMgdmlhIHN1bmRvZy5cbktNU0V4dGVuc2lvbiA9IChjb25maWRlbnRpYWwsIFNESykgLT5cbiAgIyBBY2Nlc3MgdG8gdGhlIEFXUyBBUEkgdGhyb3VnaCB0aGUgU3VuZG9nIGhlbHBlciBsYXllci5cbiAge0FXUzp7S01TfX0gPSBTdW5kb2cgU0RLXG4gIHtyYW5kb21LZXksIGVuY3J5cHQ6a21zRW5jcnlwdCwgZGVjcnlwdDprbXNEZWNyeXB0fSA9IEtNUygpXG5cbiAgIyBPdmVycmlkZSBUd2VldE5hQ2wncyBsb2NhbCByYW5kb21CeXRlcyBtZXRob2Qgd2l0aCBLTVNcbiAgY29uZmlkZW50aWFsLnJhbmRvbUJ5dGVzID0gKGxlbmd0aCkgLT4gYXdhaXQgcmFuZG9tS2V5IGxlbmd0aCwgXCJidWZmZXJcIlxuXG4gICMgRXh0ZW5kIHRoZSBrZXktdHlwZSBpbnRlcmZhY2VcbiAgY29uZmlkZW50aWFsLmtleS5LTVMgPSBrbXNLZXlJRFxuICBjb25maWRlbnRpYWwua2V5LmlzS01TS2V5SUQgPSBpc0tNU0tleUlEXG5cbiAge2VuY29kZSwgZGVjb2RlLCBpc0RhdGEsIHJhbmRvbUJ5dGVzLCBuYWNsfSA9IGNvbmZpZGVudGlhbFxuXG4gICMgRXh0ZW5zaW9uIHRvIFN5bW1ldHJpYyBFbmNyeXB0aW9uIHRoYXQgZW5jcnlwdHMgdGhlIGtleSB3aXRoIEtNUy5cbiAgTWV0aG9kLmRlZmluZSBjb25maWRlbnRpYWwuZW5jcnlwdCwgaXNLTVNLZXlJRCwgaXNEYXRhLFxuICAgICh7aWR9LCBwbGFpbnRleHQpIC0+XG4gICAgICBsZW5ndGggPSBuYWNsLnNlY3JldGJveC5ub25jZUxlbmd0aCArIG5hY2wuc2VjcmV0Ym94LmtleUxlbmd0aFxuICAgICAgciA9IGF3YWl0IHJhbmRvbUJ5dGVzIGxlbmd0aFxuICAgICAga2V5ID0gci5zbGljZSAwLCBuYWNsLnNlY3JldGJveC5rZXlMZW5ndGhcbiAgICAgIG5vbmNlID0gci5zbGljZSBuYWNsLnNlY3JldGJveC5rZXlMZW5ndGhcblxuICAgICAgY2lwaGVydGV4dCA9IG5hY2wuc2VjcmV0Ym94IHBsYWludGV4dCwgbm9uY2UsIGtleVxuICAgICAgbG9ja2VkS2V5ID0gYXdhaXQga21zRW5jcnlwdCBpZCwga2V5LCBcImJ1ZmZlclwiXG4gICAgICBlbmNvZGVcbiAgICAgICAgbG9ja2VkS2V5OiBsb2NrZWRLZXkgIyBBbHJlYWR5IGJhc2U2NFxuICAgICAgICBjaXBoZXJ0ZXh0OiBlbmNvZGUgXCJiYXNlNjRcIiwgY2lwaGVydGV4dFxuICAgICAgICBub25jZTogZW5jb2RlIFwiYmFzZTY0XCIsIG5vbmNlXG5cbiAgTWV0aG9kLmRlZmluZSBjb25maWRlbnRpYWwuZW5jcnlwdCwgaXNLTVNLZXlJRCwgaXNTdHJpbmcsIGlzU3RyaW5nLFxuICAgIChrZXksIHBsYWludGV4dCwgZW5jb2RpbmcpIC0+XG4gICAgICBjb25maWRlbnRpYWwuZW5jcnlwdCBrZXksIGRlY29kZShlbmNvZGluZywgcGxhaW50ZXh0KVxuICBNZXRob2QuZGVmaW5lIGNvbmZpZGVudGlhbC5lbmNyeXB0LCBpc0tNU0tleUlELCBpc1N0cmluZyxcbiAgICAoa2V5LCBwbGFpbnRleHQpIC0+XG4gICAgICBjb25maWRlbnRpYWwuZW5jcnlwdCBrZXksIGRlY29kZShcInV0ZjhcIiwgcGxhaW50ZXh0KVxuXG4gICMgRXh0ZW5zaW9uIHRvIFN5bW1ldHJpYyBEZWNyeXB0aW9uIHRoYXQgZW5jcnlwdHMgdGhlIGtleSB3aXRoIEtNUy5cbiAgTWV0aG9kLmRlZmluZSBjb25maWRlbnRpYWwuZGVjcnlwdCwgaXNLTVNLZXlJRCwgaXNEYXRhLCBpc1N0cmluZyxcbiAgICAoe2lkfSwgYmxvYiwgZW5jb2RpbmcpIC0+XG4gICAgICB7Y2lwaGVydGV4dCwgbm9uY2UsIGxvY2tlZEtleX0gPSBKU09OLnBhcnNlIGVuY29kZSBcInV0ZjhcIiwgYmxvYlxuICAgICAgY2lwaGVydGV4dCA9IGRlY29kZSBcImJhc2U2NFwiLCBjaXBoZXJ0ZXh0XG4gICAgICBub25jZSA9IGRlY29kZSBcImJhc2U2NFwiLCBub25jZVxuICAgICAga2V5ID0gYXdhaXQga21zRGVjcnlwdCBsb2NrZWRLZXksIFwiYnVmZmVyXCJcbiAgICAgIGVuY29kZSBlbmNvZGluZywgbmFjbC5zZWNyZXRib3gub3BlbiBjaXBoZXJ0ZXh0LCBub25jZSwga2V5XG4gIE1ldGhvZC5kZWZpbmUgY29uZmlkZW50aWFsLmRlY3J5cHQsIGlzS01TS2V5SUQsIGlzRGF0YSxcbiAgICAoa2V5LCBibG9iKSAtPlxuICAgICAgY29uZmlkZW50aWFsLmRlY3J5cHQga2V5LCBibG9iLCBcInV0ZjhcIlxuICBNZXRob2QuZGVmaW5lIGNvbmZpZGVudGlhbC5kZWNyeXB0LCBpc0tNU0tleUlELCBpc1N0cmluZywgaXNTdHJpbmcsXG4gICAgKGtleSwgYmxvYiwgZW5jb2RpbmcpIC0+XG4gICAgICBjb25maWRlbnRpYWwuZGVjcnlwdCBrZXksIGRlY29kZShcImJhc2U2NFwiLCBibG9iKSwgZW5jb2RpbmdcbiAgTWV0aG9kLmRlZmluZSBjb25maWRlbnRpYWwuZGVjcnlwdCwgaXNLTVNLZXlJRCwgaXNTdHJpbmcsXG4gICAgKGtleSwgYmxvYikgLT5cbiAgICAgIGNvbmZpZGVudGlhbC5kZWNyeXB0IGtleSwgZGVjb2RlKFwiYmFzZTY0XCIsIGJsb2IpLCBcInV0ZjhcIlxuXG4gIGNvbmZpZGVudGlhbFxuXG5leHBvcnQgZGVmYXVsdCBLTVNFeHRlbnNpb25cbiJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=index.coffee